@model IEnumerable<CarWebSite.Models.Car>

@{
    ViewData["Title"] = "New Cars";
}

<div class="container-fluid p-0">
    <div class="position-relative">
        <div class="container position-relative">
            <div class="row justify-content-center mb-5">
                <div class="col-md-8 text-center">
                    <div class="card border-light shadow-sm">
                        <div class="card-body">
                            <h2 class="card-title text-center mb-4" style="color: #8B4513; font-weight: bold; font-size: 50px;">Choose your car</h2>

                            <!-- Filter Form -->
                            <div id="filterForm" class="d-flex justify-content-center gap-3 flex-wrap">
                                <div class="dropdown">
                                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        <span class="filter-text">Body Type</span>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item filter-item" data-filter="bodyType" data-value="">All Body Types</a></li>
                                        @foreach (var bodyType in Enum.GetNames(typeof(CarWebSite.Models.BodyType)))
                                        {
                                            <li><a class="dropdown-item filter-item" data-filter="bodyType" data-value="@bodyType">@bodyType</a></li>
                                        }
                                    </ul>
                                    <input type="hidden" id="bodyTypeInput" value="" />
                                </div>
                                <div class="dropdown">
                                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        <span class="filter-text">Brand</span>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item filter-item" data-filter="brand" data-value="">All Brands</a></li>
                                        @{
                                            var brands = Model.Select(c => c.Brand).Distinct().ToList();
                                        }
                                        @foreach (var brand in brands)
                                        {
                                            <li><a class="dropdown-item filter-item" data-filter="brand" data-value="@brand">@brand</a></li>
                                        }
                                    </ul>
                                    <input type="hidden" id="brandInput" value="" />
                                </div>
                                <div class="dropdown">
                                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        <span class="filter-text">Price</span>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item filter-item" data-filter="priceRange" data-value="">All Prices</a></li>
                                        <li><a class="dropdown-item filter-item" data-filter="priceRange" data-value="Under $30,000">Under $30,000</a></li>
                                        <li><a class="dropdown-item filter-item" data-filter="priceRange" data-value="$30,000 - $50,000">$30,000 - $50,000</a></li>
                                        <li><a class="dropdown-item filter-item" data-filter="priceRange" data-value="$50,000 - $100,000">$50,000 - $100,000</a></li>
                                        <li><a class="dropdown-item filter-item" data-filter="priceRange" data-value="Over $100,000">Over $100,000</a></li>
                                    </ul>
                                    <input type="hidden" id="priceRangeInput" value="" />
                                </div>
                                <div class="dropdown">
                                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        <span class="filter-text">Color</span>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item filter-item" data-filter="color" data-value="">All Colors</a></li>
                                        @{
                                            var colors = Model.Where(c => !string.IsNullOrEmpty(c.Color))
                                            .Select(c => c.Color)
                                            .Distinct()
                                            .ToList();
                                        }
                                        @foreach (var color in colors)
                                        {
                                            <li><a class="dropdown-item filter-item" data-filter="color" data-value="@color">@color</a></li>
                                        }
                                    </ul>
                                    <input type="hidden" id="colorInput" value="" />
                                </div>
                                <button id="resetFilters" class="btn btn-outline-secondary">
                                    <i class="bi bi-x-circle me-1"></i>Reset
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Car Listings -->
            <div class="row justify-content-center">
                <div class="col-md-10" id="carListingsContainer">
                    @if (Model != null && Model.Any())
                    {
                        foreach (var car in Model)
                        {
                            // Only show cars with mileage = 0 (new cars)
                            if (car.Mileage == 0)
                            {
                                <a href="@Url.Action("Details", "Car", new { id = car.CarId })" class="text-decoration-none text-dark car-item"
                                   data-brand="@car.Brand" data-body-type="@car.BodyType" data-color="@car.Color" data-price="@car.Price">
                                    <div class="card mb-4 shadow-sm hover-shadow" style="cursor: pointer;">
                                        <div class="card-body p-0">
                                            <div class="row g-0">
                                                <div class="col-md-5">
                                                    <img src="@car.GetMainImageUrl()" class="img-fluid rounded-start" alt="@car.Brand @car.Model">
                                                    <!-- New car badge -->
                                                    <div class="position-absolute top-0 start-0 m-2">
                                                        <span class="badge bg-success">New</span>
                                                    </div>
                                                </div>
                                                <div class="col-md-7">
                                                    <div class="card-body position-relative p-4">
                                                        <button class="btn btn-sm position-absolute top-0 end-0 mt-2 me-2 border-0 favorite-btn"
                                                                data-car-id="@car.CarId">
                                                            <i class="bi bi-heart"></i>
                                                        </button>
                                                        <h5 class="card-title">@car.Year @car.Brand @car.Model</h5>
                                                        <p class="card-text mb-1 text-success"><strong>Brand New</strong></p>
                                                        <p class="card-text mb-1"><strong>$@car.Price.ToString("#,##0")</strong></p>
                                                        <p class="card-text mb-1 deal-rating">Fair Deal</p>
                                                        <p class="card-text mb-1">Body Type: @car.BodyType</p>
                                                        <p class="card-text mb-1">Color: @(string.IsNullOrEmpty(car.Color) ? "Not specified" : car.Color)</p>
                                                        @if (!string.IsNullOrEmpty(car.Description) && car.Description.Length > 100)
                                                        {
                                                            <p class="card-text">@car.Description.Substring(0, 100)...</p>
                                                        }
                                                        else
                                                        {
                                                            <p class="card-text">@car.Description</p>
                                                        }
                                                        <p class="card-text"><small class="text-muted">Listed on: @car.ListingDate?.ToString("MMM dd, yyyy")</small></p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </a>
                            }
                        }
                    }
                    else
                    {
                        <div class="alert alert-info text-center" id="initialNoCarsMessage">
                            <h4>No new cars found matching your criteria</h4>
                            <p>Try adjusting your filters or <a href="@Url.Action("Create", "Car")" class="alert-link">add a new car listing</a>.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- No Results Message Template (hidden by default) -->
<div class="d-none" id="noResultsTemplate">
    <div class="alert alert-info text-center">
        <h4>No new cars found matching your criteria</h4>
        <p>Try adjusting your filters or <a href="@Url.Action("Create", "Car")" class="alert-link">add a new car listing</a>.</p>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Remove any existing "no cars found" message when starting to filter
            function removeNoCarMessage() {
                $('#noCarsMessage').remove();
            }

            // Handle favorite button clicks
            $(document).on('click', '.favorite-btn', function (e) {
                e.preventDefault();
                e.stopPropagation();

                const carId = $(this).data('car-id');

                // Toggle heart icon
                $(this).find('i').toggleClass('bi-heart bi-heart-fill text-danger');

                // AJAX call to save to favorites
                $.ajax({
                    url: '@Url.Action("ToggleFavorite", "Car")',
                    type: 'POST',
                    data: { carId: carId },
                    success: function(response) {
                        console.log('Favorite toggled', response);
                    },
                    error: function(error) {
                        console.error('Error toggling favorite', error);
                    }
                });
            });

            // Handle filter selections
            $('.filter-item').click(function (e) {
                e.preventDefault();
                const filter = $(this).data('filter');
                const value = $(this).data('value');

                // Remove any existing "no cars found" message when starting to filter
                removeNoCarMessage();

                // Update the hidden input value
                $(`#${filter}Input`).val(value);

                // Update the dropdown button text
                const buttonText = value === '' ?
                    filter === 'bodyType' ? 'Body Type' :
                    filter === 'brand' ? 'Brand' :
                    filter === 'priceRange' ? 'Price' : 'Color'
                    : value;

                $(this).closest('.dropdown').find('.filter-text').text(buttonText);

                // Apply filters
                applyFilters();
            });

            // Reset filters
            $('#resetFilters').click(function() {
                // Remove any existing "no cars found" message
                removeNoCarMessage();

                // Reset all hidden inputs
                $('#bodyTypeInput, #brandInput, #priceRangeInput, #colorInput').val('');

                // Reset all dropdown texts
                $('.dropdown').find('.filter-text').each(function() {
                    const defaultText = $(this).closest('.dropdown').find('.dropdown-menu li:first-child a').data('filter') === 'bodyType' ? 'Body Type' :
                                       $(this).closest('.dropdown').find('.dropdown-menu li:first-child a').data('filter') === 'brand' ? 'Brand' :
                                       $(this).closest('.dropdown').find('.dropdown-menu li:first-child a').data('filter') === 'priceRange' ? 'Price' : 'Color';
                    $(this).text(defaultText);
                });

                // Show all cars
                $('.car-item').show();
            });

            // Function to apply filters
            function applyFilters() {
                const bodyType = $('#bodyTypeInput').val();
                const brand = $('#brandInput').val();
                const priceRange = $('#priceRangeInput').val();
                const color = $('#colorInput').val();

                // If no filters are selected, show all cars and return
                if (!bodyType && !brand && !priceRange && !color) {
                    $('.car-item').show();
                    removeNoCarMessage();
                    return;
                }

                // AJAX call to get filtered cars
                $.ajax({
                    url: '@Url.Action("FilterNewCars", "Car")',
                    type: 'GET',
                    data: {
                        bodyType: bodyType,
                        brand: brand,
                        priceRange: priceRange,
                        color: color
                    },
                    beforeSend: function() {
                        // Remove any existing "no cars found" message
                        removeNoCarMessage();

                        // You could add a loading indicator here
                        // $('#carListingsContainer').append('<div id="loadingIndicator">Loading...</div>');
                    },
                    success: function(response) {
                        // If server-side filtering is implemented, replace the content
                        // $('#carListingsContainer').html(response);

                        // For client-side filtering:
                        filterCarsClientSide(bodyType, brand, priceRange, color);
                    },
                    error: function(error) {
                        console.error('Error filtering cars', error);
                    },
                    complete: function() {
                        // Remove loading indicator if you added one
                        // $('#loadingIndicator').remove();
                    }
                });
            }

            // Client-side filtering function (as a fallback or for faster filtering)
            function filterCarsClientSide(bodyType, brand, priceRange, color) {
                let visibleCount = 0;

                $('.car-item').each(function() {
                    const carBodyType = $(this).data('body-type');
                    const carBrand = $(this).data('brand');
                    const carColor = $(this).data('color');
                    const carPrice = parseFloat($(this).data('price'));

                    let showCar = true;

                    // Apply body type filter
                    if (bodyType && carBodyType !== bodyType) {
                        showCar = false;
                    }

                    // Apply brand filter
                    if (brand && carBrand !== brand) {
                        showCar = false;
                    }

                    // Apply color filter
                    if (color && carColor !== color) {
                        showCar = false;
                    }

                    // Apply price range filter
                    if (priceRange) {
                        if (priceRange === 'Under $30,000' && carPrice >= 30000) {
                            showCar = false;
                        } else if (priceRange === '$30,000 - $50,000' && (carPrice < 30000 || carPrice > 50000)) {
                            showCar = false;
                        } else if (priceRange === '$50,000 - $100,000' && (carPrice < 50000 || carPrice > 100000)) {
                            showCar = false;
                        } else if (priceRange === 'Over $100,000' && carPrice <= 100000) {
                            showCar = false;
                        }
                    }

                    // Show or hide the car based on filters
                    if (showCar) {
                        $(this).show();
                        visibleCount++;
                    } else {
                        $(this).hide();
                    }
                });

                // Show "no results" message if no cars are visible
                if (visibleCount === 0) {
                    // Only add the message if it doesn't already exist
                    if ($('#noCarsMessage').length === 0) {
                        $('#carListingsContainer').append(
                            $('<div class="alert alert-info text-center" id="noCarsMessage">')
                                .append('<h4>No new cars found matching your criteria</h4>')
                                .append('<p>Try adjusting your filters or <a href="' + '@Url.Action("Create", "Car")' + '" class="alert-link">add a new car listing</a>.</p>')
                        );
                    }
                }
            }
        });
    </script>
    <style>
        /* --------------------------- Overall Containers --------------------------- */
        .container-fluid.p-0 {
            padding: 0;
        }
        /* Top banner background */
        .position-relative > .bg-light {
            background-color: #f5e6d8 !important;
            min-height: 200px;
        }
        /* --------------------------- Filter Card & Form --------------------------- */
        .card.border-light.shadow-sm {
            margin-top: 50px;
            border: 1px solid #e0d6cc;
            border-radius: 8px;
        }
        .card-body {
            padding: 20px;
        }
        .card-title {
            color: #8B4513;
            font-weight: bold;
            margin-bottom: 20px;
        }
        /* Filter Form Layout */
        #filterForm {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 25px;
        }
        /* Dropdown Button Styling */
        .dropdown .btn {
            background-color: #ffffff;
            border-color: #6E4331;
            color: #6E4331;
            transition: background-color 0.3s ease;
        }
        .dropdown .btn:hover {
            background-color: #6E4331;
            color: #fff;
        }
        /* Dropdown Menu and Items */
        .dropdown-menu {
            min-width: 150px;
        }
        .dropdown-menu .dropdown-item {
            cursor: pointer;
            transition: background-color 0.2s ease;
        }
        .dropdown-menu .dropdown-item:hover {
            background-color: #f5e6d8;
        }
        /* Reset Filters Button */
        #resetFilters {
            background-color: #ffffff;
            border: 1px solid #7c0713;
            color: #dc3545;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: background-color 0.3s ease, color 0.3s ease;
        }
        #resetFilters:hover {
            background-color: #dc3545;
            color: #fff;
        }

        /* --------------------------- Car Listings --------------------------- */
        #carListingsContainer {
            margin-top: 30px;
        }
        /* Each Car Item Link */
        a.car-item {
            text-decoration: none;
            color: inherit;
        }
        /* Car Card Styling */
        .card.mb-4.shadow-sm.hover-shadow {
            border: none;
            border-radius: 8px;
            overflow: hidden;
            transition: box-shadow 0.3s ease, transform 0.3s ease;
            cursor: pointer;
        }
        .card.mb-4.shadow-sm.hover-shadow:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
        }
        /* Car Image */
        .card .img-fluid {
            width: 100%;
            object-fit: cover;
        }
        /* New Car Badge */
        .position-absolute.top-0.start-0.m-2 .badge.bg-success {
            font-size: 0.85rem;
            padding: 5px 10px;
        }
        /* Favorite Button positioned on card */
        .favorite-btn {
            background-color: transparent;
            color: #dc3545;
            font-size: 1.2rem;
            border: none;
            cursor: pointer;
            transition: color 0.3s ease;
        }
        .favorite-btn:hover {
            color: #bd2130;
        }
        /* Card Text & Titles */
        .card-body .card-title {
            font-size: 1.2rem;
            font-weight: bold;
        }
        .card-text {
            margin-bottom: 5px;
        }
        /* Deal Rating styling (if applicable) */
        .deal-rating {
            color: #ff9800;
            font-weight: bold;
        }

        /* --------------------------- Alert & No Results --------------------------- */
        .alert.alert-info {
            margin-top: 20px;
        }
        #noResultsTemplate .alert {
            margin-top: 20px;
            font-size: 1rem;
            font-weight: normal;
        }
    </style>
}